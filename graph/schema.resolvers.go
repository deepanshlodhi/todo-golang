package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"
	"net/http"
	"time"
	"todo/graph/middleware"
	"todo/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodo) (*model.Todo, error) {
	// fmt.Println("inside")
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	user, ok := ctx.Value(middleware.UserKey).(*middleware.UserSessionData)
	// fmt.Println(user)
	if !ok {
		// Handle the case where the value is not of type *UserSessionData or is not present
		fmt.Println("User not found in context or wrong type")
		return nil, fmt.Errorf("something went wrong")
	}
	todo := &model.Todo{
		Content:   &input.Content,
		ID:        fmt.Sprintf("T%d", randNumber),
		Title:     input.Title,
		CreatedAt: time.Now().UTC(),
		CreatedBy: user.ID,
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input model.UpdateTodo) (*model.Todo, error) {
	user, ok := ctx.Value(middleware.UserKey).(*middleware.UserSessionData)
	// fmt.Println(user)
	if !ok {
		// Handle the case where the value is not of type *UserSessionData or is not present
		fmt.Println("User not found in context or wrong type")
		return nil, http.ErrMissingFile
	}

	var temp *model.Todo
	for _, todo := range r.todos {
		if todo.ID == id {
			if todo.CreatedBy == user.ID {
				temp = todo
			} else {
				return nil, fmt.Errorf("Unauthorized")
			}
		}
	}

	if temp == nil {
		return nil, fmt.Errorf("Todo not found")
	}

	temp.Content = input.Content
	if input.Title != nil {
		temp.Title = *input.Title
	}

	return temp, nil

}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (*model.Todo, error) {
	user, ok := ctx.Value(middleware.UserKey).(*middleware.UserSessionData)
	// fmt.Println(user)
	if !ok {
		// Handle the case where the value is not of type *UserSessionData or is not present
		fmt.Println("User not found in context or wrong type")
		return nil, http.ErrMissingFile
	}

	var temp *model.Todo
	var index int
	for i, todo := range r.todos {
		if todo.ID == id {
			if todo.CreatedBy == user.ID {
				temp = todo
				index = i
			} else {
				return nil, fmt.Errorf("Unauthorized")
			}
		}
	}

	if temp == nil {
		return nil, fmt.Errorf("Todo not found")
	}

	r.todos = append(r.todos[:index], r.todos[index+1:]...)

	return temp, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	for _, todo := range r.todos {
		if todo.ID == id {
			return todo, nil
		}
	}

	return nil, fmt.Errorf("Todo not found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
